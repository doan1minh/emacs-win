gnutls_certificate_verify_peers(3)  gnutls  gnutls_certificate_verify_peers(3)



NNAAMMEE
       gnutls_certificate_verify_peers - API function

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ggnnuuttllss//ggnnuuttllss..hh>>

       iinntt      ggnnuuttllss__cceerrttiiffiiccaattee__vveerriiffyy__ppeeeerrss((ggnnuuttllss__sseessssiioonn__tt      _s_e_s_s_i_o_n,,
       ggnnuuttllss__ttyyppeedd__vvddaattaa__sstt ** _d_a_t_a,, uunnssiiggnneedd iinntt  _e_l_e_m_e_n_t_s,,  uunnssiiggnneedd  iinntt  **
       _s_t_a_t_u_s));;

AARRGGUUMMEENNTTSS
       gnutls_session_t session
                   is a gnutls session

       gnutls_typed_vdata_st * data
                   an array of typed data

       unsigned int elements
                   the number of data elements

       unsigned int * status
                   is the output of the verification

DDEESSCCRRIIPPTTIIOONN
       This  function  will verify the peer's certificate and store the status
       in the  _s_t_a_t_u_s variable as a bitwise  or'd  gnutls_certificate_status_t
       values  or zero if the certificate is trusted. Note that value in  _s_t_a_-
       _t_u_s is set only when the return value of this function is success (i.e,
       failure to trust a certificate does not imply a negative return value).
       The default verification flags used by this function can be  overridden
       using  ggnnuuttllss__cceerrttiiffiiccaattee__sseett__vveerriiffyy__ffllaaggss(()).  See the documentation of
       ggnnuuttllss__cceerrttiiffiiccaattee__vveerriiffyy__ppeeeerrss22(())  for  details  in  the  verification
       process.

       The    acceptable     _d_a_t_a   types   are   GGNNUUTTLLSS__DDTT__DDNNSS__HHOOSSTTNNAAMMEE   and
       GGNNUUTTLLSS__DDTT__KKEEYY__PPUURRPPOOSSEE__OOIIDD.  The former accepts as  data  a  null-termi-
       nated  hostname,  and  the  latter  a null-terminated object identifier
       (e.g., GGNNUUTTLLSS__KKPP__TTLLSS__WWWWWW__SSEERRVVEERR).  If a DNS hostname is  provided  then
       this  function will compare the hostname in the certificate against the
       given. If names do not match  the  GGNNUUTTLLSS__CCEERRTT__UUNNEEXXPPEECCTTEEDD__OOWWNNEERR  status
       flag  will  be  set.  If a key purpose OID is provided and the end-cer-
       tificate contains the extended key usage PKIX  extension,  it  will  be
       required  to be have the provided key purpose or be marked for any pur-
       pose, otherwise verification  will  fail  with  GGNNUUTTLLSS__CCEERRTT__SSIIGGNNEERR__CCOONN--
       SSTTRRAAIINNTTSS__FFAAIILLUURREE status.

RREETTUURRNNSS
       a negative error code on error and GGNNUUTTLLSS__EE__SSUUCCCCEESSSS (0) on success.

SSIINNCCEE
       3.3.0

RREEPPOORRTTIINNGG BBUUGGSS
       Report bugs to <bugs@gnutls.org>.
       Home page: http://www.gnutls.org


CCOOPPYYRRIIGGHHTT
       Copyright (C) 2001-2014 Free Software Foundation, Inc..
       Copying  and  distribution  of this file, with or without modification,
       are permitted in any medium  without  royalty  provided  the  copyright
       notice and this notice are preserved.

SSEEEE AALLSSOO
       The  full  documentation  for ggnnuuttllss is maintained as a Texinfo manual.
       If the /usr/share/doc/gnutls/ directory does not contain the HTML  form
       visit

       hhttttpp::////wwwwww..ggnnuuttllss..oorrgg//mmaannuuaall//

gnutls                              3.3.10  gnutls_certificate_verify_peers(3)
