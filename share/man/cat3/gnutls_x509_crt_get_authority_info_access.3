gnutls_x509_crt_get_authority_info_gancgucnteulstssl_(sx35)09_crt_get_authority_info_access(3)



NNAAMMEE
       gnutls_x509_crt_get_authority_info_access - API function

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ggnnuuttllss//xx550099..hh>>

       iinntt   ggnnuuttllss__xx550099__ccrrtt__ggeett__aauutthhoorriittyy__iinnffoo__aacccceessss((ggnnuuttllss__xx550099__ccrrtt__tt  _c_r_t,,
       uunnssiiggnneedd iinntt _s_e_q,, iinntt _w_h_a_t,, ggnnuuttllss__ddaattuumm__tt ** _d_a_t_a,, uunnssiiggnneedd iinntt ** _c_r_i_t_-
       _i_c_a_l));;

AARRGGUUMMEENNTTSS
       gnutls_x509_crt_t crt
                   Holds the certificate

       unsigned int seq
                   specifies  the  sequence number of the access descriptor (0
                   for the first one, 1 for the second etc.)

       int what    what data to get, a ggnnuuttllss__iinnffoo__aacccceessss__wwhhaatt__tt type.

       gnutls_datum_t * data
                   output data to be freed with ggnnuuttllss__ffrreeee(()).

       unsigned int * critical
                   pointer to output integer that is set to  non-zero  if  the
                   extension is marked as critical (may be NNUULLLL)

DDEESSCCRRIIPPTTIIOONN
       Note  that  a simpler API to access the authority info data is provided
       by ggnnuuttllss__xx550099__aaiiaa__ggeett(()) and ggnnuuttllss__xx550099__eexxtt__iimmppoorrtt__aaiiaa(()).

       This function extracts the Authority Information  Access  (AIA)  exten-
       sion,  see  RFC  5280  section  4.2.2.1  for more information.  The AIA
       extension holds a sequence of AccessDescription (AD) data.

       The  _s_e_q input parameter is  used  to  indicate  which  member  of  the
       sequence  the caller is interested in.  The first member is 0, the sec-
       ond member 1 and so  on.   When  the   _s_e_q  value  is  out  of  bounds,
       GGNNUUTTLLSS__EE__RREEQQUUEESSTTEEDD__DDAATTAA__NNOOTT__AAVVAAIILLAABBLLEE is returned.

       The  type of data returned in  _d_a_t_a is specified via  _w_h_a_t which should
       be ggnnuuttllss__iinnffoo__aacccceessss__wwhhaatt__tt values.

       If  _w_h_a_t is GGNNUUTTLLSS__IIAA__AACCCCEESSSSMMEETTHHOODD__OOIIDD then  _d_a_t_a will hold the access-
       Method OID (e.g., "1.3.6.1.5.5.7.48.1").

       If   _w_h_a_t is GGNNUUTTLLSS__IIAA__AACCCCEESSSSLLOOCCAATTIIOONN__GGEENNEERRAALLNNAAMMEE__TTYYPPEE,  _d_a_t_a will hold
       the  accessLocation  GeneralName  type  (e.g.,  "uniformResourceIdenti-
       fier").

       If  _w_h_a_t is GGNNUUTTLLSS__IIAA__UURRII,  _d_a_t_a will hold the accessLocation URI data.
       Requesting this  _w_h_a_t value leads to an error if the accessLocation  is
       not of the "uniformResourceIdentifier" type.

       If  _w_h_a_t is GGNNUUTTLLSS__IIAA__OOCCSSPP__UURRII,  _d_a_t_a will hold the OCSP URI.  Request-
       ing this  _w_h_a_t value leads to an  error  if  the  accessMethod  is  not
       1.3.6.1.5.5.7.48.1  aka  OSCP, or if accessLocation is not of the "uni-
       formResourceIdentifier" type.

       If  _w_h_a_t is GGNNUUTTLLSS__IIAA__CCAAIISSSSUUEERRSS__UURRII,  _d_a_t_a will hold the caIssuers URI.
       Requesting  this   _w_h_a_t  value leads to an error if the accessMethod is
       not 1.3.6.1.5.5.7.48.2 aka caIssuers, or if accessLocation  is  not  of
       the "uniformResourceIdentifier" type.

       More  _w_h_a_t values may be allocated in the future as needed.

       If  _d_a_t_a is NULL, the function does the same without storing the output
       data, that is, it will set  _c_r_i_t_i_c_a_l and do error checking as usual.

       The value of the critical flag is returned in * _c_r_i_t_i_c_a_l  .   Supply  a
       NULL   _c_r_i_t_i_c_a_l  if you want the function to make sure the extension is
       non-critical, as required by RFC 5280.

RREETTUURRNNSS
       GGNNUUTTLLSS__EE__SSUUCCCCEESSSS on success, GGNNUUTTLLSS__EE__IINNVVAALLIIDD__RREEQQUUEESSTT on invalid  _c_r_t ,
       GGNNUUTTLLSS__EE__CCOONNSSTTRRAAIINNTT__EERRRROORR  if  the  extension  is incorrectly marked as
       critical (use a non-NULL  _c_r_i_t_i_c_a_l to override), GGNNUUTTLLSS__EE__UUNNKKNNOOWWNN__AALLGGOO--
       RRIITTHHMM   if   the  requested  OID  does  not  match  (e.g.,  when  using
       GGNNUUTTLLSS__IIAA__OOCCSSPP__UURRII), otherwise a negative error code.

SSIINNCCEE
       3.0

RREEPPOORRTTIINNGG BBUUGGSS
       Report bugs to <bugs@gnutls.org>.
       Home page: http://www.gnutls.org


CCOOPPYYRRIIGGHHTT
       Copyright (C) 2001-2014 Free Software Foundation, Inc..
       Copying and distribution of this file, with  or  without  modification,
       are  permitted  in  any  medium  without royalty provided the copyright
       notice and this notice are preserved.

SSEEEE AALLSSOO
       The full documentation for ggnnuuttllss is maintained as  a  Texinfo  manual.
       If  the /usr/share/doc/gnutls/ directory does not contain the HTML form
       visit

       hhttttpp::////wwwwww..ggnnuuttllss..oorrgg//mmaannuuaall//

gnutls                            gn3u.t3l.s1_0x509_crt_get_authority_info_access(3)
