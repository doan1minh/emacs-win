gnutls-serv(1)                   User Commands                  gnutls-serv(1)



NNAAMMEE
       ggnnuuttllss--sseerrvv - GnuTLS server

SSYYNNOOPPSSIISS
       ggnnuuttllss--sseerrvv [--ffllaaggss] [--ffllaagg [_v_a_l_u_e]] [----ooppttiioonn--nnaammee[[=| ]_v_a_l_u_e]]

       All arguments must be options.


DDEESSCCRRIIPPTTIIOONN
       Server program that listens to incoming TLS connections.

OOPPTTIIOONNSS
       --dd _n_u_m_b_e_r, ----ddeebbuugg=_n_u_m_b_e_r
              Enable  debugging.   This  option takes an integer number as its
              argument.  The value of _n_u_m_b_e_r is constrained to being:
                  in the range  0 through 9999

              Specifies the debug level.

       ----nnoottiicckkeett
              Don't accept session tickets.


       --gg, ----ggeenneerraattee
              Generate Diffie-Hellman and RSA-export parameters.


       --qq, ----qquuiieett
              Suppress some messages.


       ----nnooddbb Do not use a resumption database.


       ----hhttttpp Act as an HTTP server.


       ----eecchhoo Act as an Echo server.


       --uu, ----uuddpp
              Use DTLS (datagram TLS) over UDP.


       ----mmttuu=_n_u_m_b_e_r
              Set MTU for datagram TLS.  This option takes an integer number
              as its argument.  The value of _n_u_m_b_e_r is constrained to being:
                  in the range  0 through 17000


       ----ssrrttpp--pprrooffiilleess=_s_t_r_i_n_g
              Offer SRTP profiles.


       --aa, ----ddiissaabbllee--cclliieenntt--cceerrtt
              Do not request a client certificate.


       --rr, ----rreeqquuiirree--cclliieenntt--cceerrtt
              Require a client certificate.


       ----vveerriiffyy--cclliieenntt--cceerrtt
              If a client certificate is sent then verify it..

              Do not require, but if a client certificate is sent then verify
              it and close the connection if invalid.

       --bb, ----hheeaarrttbbeeaatt
              Activate heartbeat support.

              Regularly ping client via heartbeat extension messages

       ----xx550099ffmmttddeerr
              Use DER format for certificates to read from.


       ----pprriioorriittyy=_s_t_r_i_n_g
              Priorities string.

              TLS algorithms and protocols to enable. You can use predefined
              sets of ciphersuites such as PERFORMANCE, NORMAL, SECURE128,
              SECURE256. The default is NORMAL.

              Check  the  GnuTLS  manual  on  section  "Priority strings" for
              more information on allowed keywords

       ----ddhhppaarraammss=_f_i_l_e
              DH params file to use.


       ----xx550099ccaaffiillee=_s_t_r_i_n_g
              Certificate file or PKCS #11 URL to use.


       ----xx550099ccrrllffiillee=_f_i_l_e
              CRL file to use.


       ----ppggppkkeeyyffiillee=_f_i_l_e
              PGP Key file to use.


       ----ppggppkkeeyyrriinngg=_f_i_l_e
              PGP Key ring file to use.


       ----ppggppcceerrttffiillee=_f_i_l_e
              PGP Public Key (certificate) file to use.


       ----xx550099kkeeyyffiillee=_s_t_r_i_n_g
              X.509 key file or PKCS #11 URL to use.


       ----xx550099cceerrttffiillee=_s_t_r_i_n_g
              X.509 Certificate file or PKCS #11 URL to use.


       ----xx550099ddssaakkeeyyffiillee=_s_t_r_i_n_g
              Alternative X.509 key file or PKCS #11 URL to use.


       ----xx550099ddssaacceerrttffiillee=_s_t_r_i_n_g
              Alternative X.509 Certificate file or PKCS #11 URL to use.


       ----xx550099eecccckkeeyyffiillee=_s_t_r_i_n_g
              Alternative X.509 key file or PKCS #11 URL to use.


       ----xx550099eecccccceerrttffiillee=_s_t_r_i_n_g
              Alternative X.509 Certificate file or PKCS #11 URL to use.


       ----ppggppssuubbkkeeyy=_s_t_r_i_n_g
              PGP subkey to use (hex or auto).


       ----ssrrppppaasssswwdd=_f_i_l_e
              SRP password file to use.


       ----ssrrppppaasssswwddccoonnff=_f_i_l_e
              SRP password configuration file to use.


       ----ppsskkppaasssswwdd=_f_i_l_e
              PSK password file to use.


       ----ppsskkhhiinntt=_s_t_r_i_n_g
              PSK identity hint to use.


       ----ooccsspp--rreessppoonnssee=_f_i_l_e
              The OCSP response to send to client.

              If the client requested an OCSP response, return data from this
              file to the client.

       --pp _n_u_m_b_e_r, ----ppoorrtt=_n_u_m_b_e_r
              The port to connect to.  This option takes an integer number as
              its argument.


       --ll, ----lliisstt
              Print a list of the supported algorithms and modes.

              Print a list of the supported algorithms and modes. If a prior-
              ity string is given then only the enabled ciphersuites are
              shown.

       ----pprroovviiddeerr=_f_i_l_e
              Specify the PKCS #11 provider library.

              This will override the default options in
              /etc/gnutls/pkcs11.conf

       --hh, ----hheellpp
              Display usage information and exit.

       --!!, ----mmoorree--hheellpp
              Pass the extended usage information through a pager.

       --vv [{_v_|_c_|_n ----vveerrssiioonn [{_v_|_c_|_n}]}]
              Output version of program and exit.  The default mode is `v', a
              simple version.  The `c' mode will print copyright information
              and `n' will print the full copyright notice.

EEXXAAMMPPLLEESS
       Running your own TLS server based on GnuTLS can be useful when debug-
       ging clients and/or GnuTLS itself.  This section describes how to use
       ggnnuuttllss--sseerrvv as a simple HTTPS server.

       The most basic server can be started as:

           gnutls-serv --http --priority "NORMAL:+ANON-ECDH:+ANON-DH"

       It will only support anonymous ciphersuites, which many TLS clients
       refuse to use.

       The next step is to add support for X.509.  First we generate a CA:

           $ certtool --generate-privkey > x509-ca-key.pem
           $ echo 'cn = GnuTLS test CA' > ca.tmpl
           $ echo 'ca' >> ca.tmpl
           $ echo 'cert_signing_key' >> ca.tmpl
           $ certtool --generate-self-signed --load-privkey x509-ca-key.pem   --template ca.tmpl --outfile x509-ca.pem

       Then generate a server certificate.  Remember to change the dns_name
       value to the name of your server host, or skip that command to avoid
       the field.

           $ certtool --generate-privkey > x509-server-key.pem
           $ echo 'organization = GnuTLS test server' > server.tmpl
           $ echo 'cn = test.gnutls.org' >> server.tmpl
           $ echo 'tls_www_server' >> server.tmpl
           $ echo 'encryption_key' >> server.tmpl
           $ echo 'signing_key' >> server.tmpl
           $ echo 'dns_name = test.gnutls.org' >> server.tmpl
           $ certtool --generate-certificate --load-privkey x509-server-key.pem   --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem   --template server.tmpl --outfile x509-server.pem

       For use in the client, you may want to generate a client certificate as
       well.

           $ certtool --generate-privkey > x509-client-key.pem
           $ echo 'cn = GnuTLS test client' > client.tmpl
           $ echo 'tls_www_client' >> client.tmpl
           $ echo 'encryption_key' >> client.tmpl
           $ echo 'signing_key' >> client.tmpl
           $ certtool --generate-certificate --load-privkey x509-client-key.pem   --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem   --template client.tmpl --outfile x509-client.pem

       To be able to import the client key/certificate into some applications,
       you will need to convert them into a PKCS#12 structure.  This also
       encrypts the security sensitive key with a password.

           $ certtool --to-p12 --load-ca-certificate x509-ca.pem   --load-privkey x509-client-key.pem --load-certificate x509-client.pem   --outder --outfile x509-client.p12

       For icing, we'll create a proxy certificate for the client too.

           $ certtool --generate-privkey > x509-proxy-key.pem
           $ echo 'cn = GnuTLS test client proxy' > proxy.tmpl
           $ certtool --generate-proxy --load-privkey x509-proxy-key.pem   --load-ca-certificate x509-client.pem --load-ca-privkey x509-client-key.pem   --load-certificate x509-client.pem --template proxy.tmpl   --outfile x509-proxy.pem

       Then start the server again:

           $ gnutls-serv --http             --x509cafile x509-ca.pem             --x509keyfile x509-server-key.pem             --x509certfile x509-server.pem

       Try connecting to the server using your web browser.  Note that the
       server listens to port 5556 by default.

       While you are at it, to allow connections using DSA, you can also cre-
       ate a DSA key and certificate for the server.  These credentials will
       be used in the final example below.

           $ certtool --generate-privkey --dsa > x509-server-key-dsa.pem
           $ certtool --generate-certificate --load-privkey x509-server-key-dsa.pem   --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem   --template server.tmpl --outfile x509-server-dsa.pem

       The next step is to create OpenPGP credentials for the server.

           gpg --gen-key

       Make a note of the OpenPGP key identifier of the newly generated key,
       here it was 55DD11DD1144DD88.  You will need to export the key for GnuTLS to be
       able to use it.

           gpg -a --export 5D1D14D8 > openpgp-server.txt
           gpg --export 5D1D14D8 > openpgp-server.bin
           gpg --export-secret-keys 5D1D14D8 > openpgp-server-key.bin
           gpg -a --export-secret-keys 5D1D14D8 > openpgp-server-key.txt

       Let's start the server with support for OpenPGP credentials:

           gnutls-serv --http --priority NORMAL:+CTYPE-OPENPGP             --pgpkeyfile openpgp-server-key.txt             --pgpcertfile openpgp-server.txt

       The next step is to add support for SRP authentication. This requires
       an SRP password file created with ssrrppttooooll.  To start the server with
       SRP support:

           gnutls-serv --http --priority NORMAL:+SRP-RSA:+SRP             --srppasswdconf srp-tpasswd.conf             --srppasswd srp-passwd.txt

       Let's also start a server with support for PSK. This would require a
       password file created with ppsskkttooooll.

           gnutls-serv --http --priority NORMAL:+ECDHE-PSK:+PSK             --pskpasswd psk-passwd.txt

       Finally, we start the server with all the earlier parameters and you
       get this command:

           gnutls-serv --http --priority NORMAL:+PSK:+SRP:+CTYPE-OPENPGP             --x509cafile x509-ca.pem             --x509keyfile x509-server-key.pem             --x509certfile x509-server.pem             --x509dsakeyfile x509-server-key-dsa.pem             --x509dsacertfile x509-server-dsa.pem             --pgpkeyfile openpgp-server-key.txt             --pgpcertfile openpgp-server.txt             --srppasswdconf srp-tpasswd.conf             --srppasswd srp-passwd.txt             --pskpasswd psk-passwd.txt

EEXXIITT SSTTAATTUUSS
       One of the following exit values will be returned:

       0  (EXIT_SUCCESS)
              Successful program execution.

       1  (EXIT_FAILURE)
              The operation failed or the command syntax was not valid.

       70  (EX_SOFTWARE)
              libopts had an internal operational error.  Please report it to
              autogen-users@lists.sourceforge.net.  Thank you.

SSEEEE AALLSSOO
       gnutls-cli-debug(1), gnutls-cli(1)

AAUUTTHHOORRSS
       Nikos Mavrogiannopoulos, Simon Josefsson and others; see
       /usr/share/doc/gnutls/AUTHORS for a complete list.

CCOOPPYYRRIIGGHHTT
       Copyright (C) 2000-2014 Free Software Foundation, and others all rights
       reserved.  This program is released under the terms of the GNU General
       Public License, version 3 or later.

BBUUGGSS
       Please send bug reports to: bugs@gnutls.org

NNOOTTEESS
       This manual page was _A_u_t_o_G_e_n-erated from the ggnnuuttllss--sseerrvv option defini-
       tions.



3.3.11                            11 Dec 2014                   gnutls-serv(1)
